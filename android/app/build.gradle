apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

// React Native configuration
react {
    // Uncomment lines below if custom paths or variants are needed.
    // root = file("../")
    // reactNativeDir = file("../node_modules/react-native")
    // codegenDir = file("../node_modules/@react-native/codegen")
    // cliFile = file("../node_modules/react-native/cli.js")
    // debuggableVariants = ["liteDebug", "prodDebug"]
    // nodeExecutableAndArgs = ["node"]
    // bundleCommand = "ram-bundle"
    // bundleConfig = file(../rn-cli.config.js)
    // bundleAssetName = "MyApplication.android.bundle"
    // entryFile = file("../js/MyApplication.android.js")
    // extraPackagerArgs = []
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    // hermesFlags = ["-O", "-output-source-map"]
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace "com.ham2k.polo"

    defaultConfig {
        applicationId "com.ham2k.polo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.env.get("POLO_BUILD").toInteger()
        versionName project.env.get("POLO_BASE_VERSION")
        setProperty("archivesBaseName", "$applicationId-v$versionCode($versionName)")
        resValue "string", "build_config_package", "com.ham2k.polo"
        manifestPlaceholders = [ appAuthRedirectScheme: 'com.ham2k.polo' ]
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(System.getenv("RELEASE_BUILD") == "true" ? System.getenv("MYAPP_UPLOAD_STORE_FILE") : 'debug.keystore')
            storePassword System.getenv("RELEASE_BUILD") == "true" ? System.getenv("MYAPP_UPLOAD_STORE_PASSWORD") : 'android'
            keyAlias System.getenv("RELEASE_BUILD") == "true" ? System.getenv("MYAPP_UPLOAD_KEY_ALIAS") : 'androiddebugkey'
            keyPassword System.getenv("RELEASE_BUILD") == "true" ? System.getenv("MYAPP_UPLOAD_KEY_PASSWORD") : 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    android.buildTypes.each { buildType ->
        buildType.resValue 'string', "CODE_PUSH_APK_BUILD_TIME", "\"${System.currentTimeMillis()}\""
    }

    flavorDimensions("environment")
    productFlavors {
        alpha { isDefault true; dimension "environment"; applicationIdSuffix ".alpha" }
        beta { dimension "environment"; applicationIdSuffix ".beta" }
        prod { dimension "environment"; applicationIdSuffix ".prod" }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation hermesEnabled.toBoolean() ? "com.facebook.react:hermes-android" : jscFlavor
    implementation project(':react-native-splash-screen')
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); 
applyNativeModulesAppBuildGradle(project)

project.ext.vectoricons = [ iconFontNames: [ 'MaterialIcons.ttf', 'MaterialCommunityIcons.ttf' ] ]
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
